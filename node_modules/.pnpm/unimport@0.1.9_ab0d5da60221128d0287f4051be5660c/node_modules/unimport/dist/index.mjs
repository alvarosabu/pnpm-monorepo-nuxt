export { k as addImportToCode, b as builtinPresets, l as createUnimport, f as dedupeImports, d as defineUnimportPreset, e as excludeRE, i as importAsRE, m as matchRE, n as normalizeImports, a as resolveBuiltinPresets, r as resolvePreset, s as separatorRE, c as stripCommentsAndStrings, g as toExports, t as toImports, j as toTypeDeclrationFile, h as toTypeDeclrationItems } from './chunks/context.mjs';
import { promises } from 'fs';
import { globby } from 'globby';
import { resolve, parse } from 'pathe';
import { findExports } from 'mlly';
import { camelCase } from 'scule';
import 'magic-string';
import 'local-pkg';

async function resolveFiles(path, pattern) {
  const files = await globby(pattern, { cwd: path, followSymbolicLinks: true });
  return files.map((p) => resolve(path, p));
}
async function scanDirExports(dir, options) {
  const dirs = Array.isArray(dir) ? dir : [dir];
  const fileFilter = options?.fileFilter || (() => true);
  const files = await Promise.all(dirs.map((i) => resolveFiles(i, [
    "*.{ts,js,mjs,cjs,mts,cts}",
    "*/index.{ts,js,mjs,cjs,mts,cts}"
  ]))).then((r) => r.flat().filter(fileFilter));
  const imports = [];
  await Promise.all(files.map(async (path) => {
    imports.push(...await scanExports(path));
  }));
  return imports;
}
async function scanExports(filepath) {
  const imports = [];
  const code = await promises.readFile(filepath, "utf-8");
  const exports = findExports(code);
  const defaultExport = exports.find((i) => i.type === "default");
  if (defaultExport) {
    let name = parse(filepath).name;
    if (name === "index") {
      name = parse(filepath.split("/").slice(0, -1).join("/")).name;
    }
    imports.push({ name: "default", as: camelCase(name), from: filepath });
  }
  for (const exp of exports) {
    if (exp.type === "named") {
      for (const name of exp.names) {
        imports.push({ name, as: name, from: filepath });
      }
    } else if (exp.type === "declaration") {
      if (exp.name) {
        imports.push({ name: exp.name, as: exp.name, from: filepath });
      }
    }
  }
  return imports;
}

export { resolveFiles, scanDirExports, scanExports };
