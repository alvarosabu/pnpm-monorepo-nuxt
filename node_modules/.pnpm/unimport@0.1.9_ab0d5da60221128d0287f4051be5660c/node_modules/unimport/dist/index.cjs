'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const context = require('./chunks/context.cjs');
const fs = require('fs');
const globby = require('globby');
const pathe = require('pathe');
const mlly = require('mlly');
const scule = require('scule');
require('magic-string');
require('local-pkg');

async function resolveFiles(path, pattern) {
  const files = await globby.globby(pattern, { cwd: path, followSymbolicLinks: true });
  return files.map((p) => pathe.resolve(path, p));
}
async function scanDirExports(dir, options) {
  const dirs = Array.isArray(dir) ? dir : [dir];
  const fileFilter = options?.fileFilter || (() => true);
  const files = await Promise.all(dirs.map((i) => resolveFiles(i, [
    "*.{ts,js,mjs,cjs,mts,cts}",
    "*/index.{ts,js,mjs,cjs,mts,cts}"
  ]))).then((r) => r.flat().filter(fileFilter));
  const imports = [];
  await Promise.all(files.map(async (path) => {
    imports.push(...await scanExports(path));
  }));
  return imports;
}
async function scanExports(filepath) {
  const imports = [];
  const code = await fs.promises.readFile(filepath, "utf-8");
  const exports = mlly.findExports(code);
  const defaultExport = exports.find((i) => i.type === "default");
  if (defaultExport) {
    let name = pathe.parse(filepath).name;
    if (name === "index") {
      name = pathe.parse(filepath.split("/").slice(0, -1).join("/")).name;
    }
    imports.push({ name: "default", as: scule.camelCase(name), from: filepath });
  }
  for (const exp of exports) {
    if (exp.type === "named") {
      for (const name of exp.names) {
        imports.push({ name, as: name, from: filepath });
      }
    } else if (exp.type === "declaration") {
      if (exp.name) {
        imports.push({ name: exp.name, as: exp.name, from: filepath });
      }
    }
  }
  return imports;
}

exports.addImportToCode = context.addImportToCode;
exports.builtinPresets = context.builtinPresets;
exports.createUnimport = context.createUnimport;
exports.dedupeImports = context.dedupeImports;
exports.defineUnimportPreset = context.defineUnimportPreset;
exports.excludeRE = context.excludeRE;
exports.importAsRE = context.importAsRE;
exports.matchRE = context.matchRE;
exports.normalizeImports = context.normalizeImports;
exports.resolveBuiltinPresets = context.resolveBuiltinPresets;
exports.resolvePreset = context.resolvePreset;
exports.separatorRE = context.separatorRE;
exports.stripCommentsAndStrings = context.stripCommentsAndStrings;
exports.toExports = context.toExports;
exports.toImports = context.toImports;
exports.toTypeDeclrationFile = context.toTypeDeclrationFile;
exports.toTypeDeclrationItems = context.toTypeDeclrationItems;
exports.resolveFiles = resolveFiles;
exports.scanDirExports = scanDirExports;
exports.scanExports = scanExports;
