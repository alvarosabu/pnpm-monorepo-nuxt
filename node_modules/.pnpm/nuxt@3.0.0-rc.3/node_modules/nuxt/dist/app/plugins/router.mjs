import { reactive, h } from "vue";
import { parseURL, parseQuery, withoutBase, isEqual } from "ufo";
import { createError } from "h3";
import { defineNuxtPlugin } from "../index.mjs";
import { callWithNuxt } from "../nuxt.mjs";
import { clearError, navigateTo, throwError, useRuntimeConfig } from "#app";
function getRouteFromPath(fullPath) {
  if (typeof fullPath === "object") {
    throw new TypeError("[nuxt] Route location object cannot be resolved when vue-router is disabled (no pages).");
  }
  const url = parseURL(fullPath.toString());
  return {
    path: url.pathname,
    fullPath,
    query: parseQuery(url.search),
    hash: url.hash,
    params: {},
    name: void 0,
    matched: [],
    redirectedFrom: void 0,
    meta: {},
    href: fullPath
  };
}
export default defineNuxtPlugin((nuxtApp) => {
  const initialURL = process.client ? withoutBase(window.location.pathname, useRuntimeConfig().app.baseURL) + window.location.search + window.location.hash : nuxtApp.ssrContext.url;
  const routes = [];
  const hooks = {
    "navigate:before": [],
    "resolve:before": [],
    "navigate:after": [],
    error: []
  };
  const registerHook = (hook, guard) => {
    hooks[hook].push(guard);
    return () => hooks[hook].splice(hooks[hook].indexOf(guard), 1);
  };
  const route = reactive(getRouteFromPath(initialURL));
  async function handleNavigation(url, replace) {
    try {
      const to = getRouteFromPath(url);
      for (const middleware of hooks["navigate:before"]) {
        const result = await middleware(to, route);
        if (result === false || result instanceof Error) {
          return;
        }
        if (result) {
          return handleNavigation(result, true);
        }
      }
      for (const handler of hooks["resolve:before"]) {
        await handler(to, route);
      }
      Object.assign(route, to);
      if (process.client) {
        window.history[replace ? "replaceState" : "pushState"]({}, "", url);
        if (!nuxtApp.isHydrating) {
          await callWithNuxt(nuxtApp, clearError);
        }
      }
      for (const middleware of hooks["navigate:after"]) {
        await middleware(to, route);
      }
    } catch (err) {
      if (process.dev && !hooks.error.length) {
        console.warn("No error handlers registered to handle middleware errors. You can register an error handler with `router.onError()`", err);
      }
      for (const handler of hooks.error) {
        await handler(err);
      }
    }
  }
  const router = {
    currentRoute: route,
    isReady: () => Promise.resolve(),
    options: {},
    install: () => Promise.resolve(),
    push: (url) => handleNavigation(url, false),
    replace: (url) => handleNavigation(url, true),
    back: () => window.history.go(-1),
    go: (delta) => window.history.go(delta),
    forward: () => window.history.go(1),
    beforeResolve: (guard) => registerHook("resolve:before", guard),
    beforeEach: (guard) => registerHook("navigate:before", guard),
    afterEach: (guard) => registerHook("navigate:after", guard),
    onError: (handler) => registerHook("error", handler),
    resolve: getRouteFromPath,
    addRoute: (parentName, route2) => {
      routes.push(route2);
    },
    getRoutes: () => routes,
    hasRoute: (name) => routes.some((route2) => route2.name === name),
    removeRoute: (name) => {
      const index = routes.findIndex((route2) => route2.name === name);
      if (index !== -1) {
        routes.splice(index, 1);
      }
    }
  };
  nuxtApp.vueApp.component("RouterLink", {
    functional: true,
    props: { to: String },
    setup: (props, { slots }) => () => h("a", { href: props.to, onClick: (e) => {
      e.preventDefault();
      router.push(props.to);
    } }, slots)
  });
  if (process.client) {
    window.addEventListener("popstate", (event) => {
      const location = event.target.location;
      router.replace(location.href.replace(location.origin, ""));
    });
  }
  nuxtApp._route = route;
  nuxtApp._middleware = nuxtApp._middleware || {
    global: [],
    named: {}
  };
  nuxtApp.hooks.hookOnce("app:created", async () => {
    router.beforeEach(async (to, from) => {
      to.meta = reactive(to.meta || {});
      nuxtApp._processingMiddleware = true;
      const middlewareEntries = new Set(nuxtApp._middleware.global);
      for (const middleware of middlewareEntries) {
        const result = await callWithNuxt(nuxtApp, middleware, [to, from]);
        if (process.server) {
          if (result === false || result instanceof Error) {
            const error = result || createError({
              statusMessage: `Route navigation aborted: ${initialURL}`
            });
            return callWithNuxt(nuxtApp, throwError, [error]);
          }
        }
        if (result || result === false) {
          return result;
        }
      }
    });
    router.afterEach(() => {
      delete nuxtApp._processingMiddleware;
    });
    await router.replace(initialURL);
    if (!isEqual(route.fullPath, initialURL)) {
      await callWithNuxt(nuxtApp, navigateTo, [route.fullPath]);
    }
  });
  return {
    provide: {
      route,
      router
    }
  };
});
