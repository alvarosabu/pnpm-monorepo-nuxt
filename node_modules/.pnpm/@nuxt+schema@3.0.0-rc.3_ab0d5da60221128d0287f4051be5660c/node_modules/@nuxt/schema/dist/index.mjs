import { resolve, join } from 'pathe';
import { existsSync, readdirSync } from 'node:fs';
import defu from 'defu';
import { isDevelopment, isCI, isTest } from 'std-env';
import createRequire from 'create-require';
import { pascalCase } from 'scule';
import jiti from 'jiti';
import { withTrailingSlash, normalizeURL, joinURL, withoutLeadingSlash } from 'ufo';
import createResolver from 'postcss-import-resolver';

const _adhoc = {
  components: {
    $resolve: (val, get) => {
      if (Array.isArray(val)) {
        return { dirs: val };
      }
      if (val === void 0 || val === true) {
        return { dirs: ["~/components"] };
      }
      return val;
    }
  },
  autoImports: {
    global: false,
    dirs: []
  },
  pages: void 0,
  telemetry: void 0
};

const _app = {
  vue: {
    config: {
      silent: { $resolve: (val, get) => val ?? !get("dev") },
      performance: { $resolve: (val, get) => val ?? get("dev") }
    },
    compilerOptions: {}
  },
  app: {
    baseURL: process.env.NUXT_APP_BASE_URL || "/",
    buildAssetsDir: process.env.NUXT_APP_BUILD_ASSETS_DIR || "/_nuxt/",
    assetsPath: {
      $resolve: (val, get) => val ?? get("buildAssetsDir")
    },
    cdnURL: {
      $resolve: (val, get) => get("dev") ? "" : (process.env.NUXT_APP_CDN_URL ?? val) || ""
    },
    head: {
      $resolve: (val, get) => {
        return defu(val, get("meta"), {
          charset: "utf-8",
          viewport: "width=device-width, initial-scale=1",
          meta: [],
          link: [],
          style: [],
          script: []
        });
      }
    }
  },
  appTemplatePath: {
    $resolve: (val, get) => {
      if (val) {
        return resolve(get("srcDir"), val);
      }
      if (existsSync(join(get("srcDir"), "app.html"))) {
        return join(get("srcDir"), "app.html");
      }
      return resolve(get("buildDir"), "views/app.template.html");
    }
  },
  store: {
    $resolve: (val, get) => val !== false && existsSync(join(get("srcDir"), get("dir.store"))) && readdirSync(join(get("srcDir"), get("dir.store"))).find((filename) => filename !== "README.md" && filename[0] !== ".")
  },
  vueMeta: null,
  head: {
    meta: [],
    link: [],
    style: [],
    script: []
  },
  meta: {
    meta: [],
    link: [],
    style: [],
    script: []
  },
  fetch: {
    server: true,
    client: true
  },
  plugins: [],
  extendPlugins: null,
  css: {
    $resolve: (val) => (val ?? []).map((c) => c.src || c)
  },
  layouts: {},
  ErrorPage: null,
  loading: {
    color: "black",
    failedColor: "red",
    height: "2px",
    throttle: 200,
    duration: 5e3,
    continuous: false,
    rtl: false,
    css: true
  },
  loadingIndicator: {
    $resolve: (val, get) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "default",
        color: get("loading.color") || "#D3D3D3",
        color2: "#F5F5F5",
        background: get("manifest") && get("manifest.theme_color") || "white",
        dev: get("dev"),
        loading: get("messages.loading")
      });
    }
  },
  pageTransition: {
    $resolve: (val, get) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "page",
        mode: "out-in",
        appear: get("render.ssr") === false || Boolean(val),
        appearClass: "appear",
        appearActiveClass: "appear-active",
        appearToClass: "appear-to"
      });
    }
  },
  layoutTransition: {
    $resolve: (val) => {
      val = typeof val === "string" ? { name: val } : val;
      return defu(val, {
        name: "layout",
        mode: "out-in"
      });
    }
  },
  features: {
    store: true,
    layouts: true,
    meta: true,
    middleware: true,
    transitions: true,
    deprecations: true,
    validate: true,
    useAsyncData: true,
    fetch: true,
    clientOnline: true,
    clientPrefetch: true,
    componentAliases: true,
    componentClientOnly: true
  }
};

const _common = {
  extends: null,
  rootDir: {
    $resolve: (val) => typeof val === "string" ? resolve(val) : process.cwd()
  },
  srcDir: {
    $resolve: (val, get) => resolve(get("rootDir"), val || ".")
  },
  buildDir: {
    $resolve: (val, get) => resolve(get("rootDir"), val || ".nuxt")
  },
  dev: Boolean(isDevelopment),
  test: Boolean(isDevelopment),
  debug: {
    $resolve: (val, get) => val ?? get("dev")
  },
  env: {
    $default: {},
    $resolve: (val) => {
      val = { ...val };
      for (const key in process.env) {
        if (key.startsWith("NUXT_ENV_")) {
          val[key] = process.env[key];
        }
      }
      return val;
    }
  },
  createRequire: {
    $resolve: (val) => {
      val = process.env.NUXT_CREATE_REQUIRE || val || (typeof globalThis.jest !== "undefined" ? "native" : "jiti");
      if (val === "jiti") {
        return (p) => jiti(typeof p === "string" ? p : p.filename);
      }
      if (val === "native") {
        return (p) => createRequire(typeof p === "string" ? p : p.filename);
      }
      return val;
    }
  },
  target: {
    $resolve: (val) => ["server", "static"].includes(val) ? val : "server"
  },
  ssr: true,
  mode: {
    $resolve: (val, get) => val || (get("ssr") ? "spa" : "universal"),
    $schema: { deprecated: "`mode` option is deprecated" }
  },
  modern: void 0,
  modules: [],
  buildModules: [],
  _modules: [],
  _installedModules: [],
  globalName: {
    $resolve: (val) => typeof val === "string" && /^[a-zA-Z]+$/.test(val) ? val.toLocaleLowerCase() : "nuxt"
  },
  globals: {
    id: (globalName) => `__${globalName}`,
    nuxt: (globalName) => `$${globalName}`,
    context: (globalName) => `__${globalName.toUpperCase()}__`,
    pluginPrefix: (globalName) => globalName,
    readyCallback: (globalName) => `on${pascalCase(globalName)}Ready`,
    loadedCallback: (globalName) => `_on${pascalCase(globalName)}Loaded`
  },
  serverMiddleware: {
    $resolve: (val) => {
      if (!val) {
        return [];
      }
      if (!Array.isArray(val)) {
        return Object.entries(val).map(([path, handler]) => ({ path, handler }));
      }
      return val;
    }
  },
  modulesDir: {
    $default: ["node_modules"],
    $resolve: (val, get) => [].concat(val.map((dir) => resolve(get("rootDir"), dir)), resolve(process.cwd(), "node_modules"))
  },
  dir: {
    assets: "assets",
    app: "app",
    layouts: "layouts",
    middleware: "middleware",
    pages: "pages",
    public: {
      $resolve: (val, get) => val || get("dir.static") || "public"
    },
    static: {
      $schema: { deprecated: "use `dir.public` option instead" },
      $resolve: (val, get) => val || get("dir.public") || "public"
    },
    store: "store"
  },
  extensions: {
    $resolve: (val) => [".js", ".jsx", ".mjs", ".ts", ".tsx", ".vue"].concat(val).filter(Boolean)
  },
  styleExtensions: [".css", ".pcss", ".postcss", ".styl", ".stylus", ".scss", ".sass", ".less"],
  alias: {
    $resolve: (val, get) => ({
      "~~": get("rootDir"),
      "@@": get("rootDir"),
      "~": get("srcDir"),
      "@": get("srcDir"),
      [get("dir.assets")]: join(get("srcDir"), get("dir.assets")),
      [get("dir.public")]: join(get("srcDir"), get("dir.public")),
      ...val
    })
  },
  ignoreOptions: void 0,
  ignorePrefix: "-",
  ignore: {
    $resolve: (val, get) => [
      "**/*.stories.{js,ts,jsx,tsx}",
      "**/*.{spec,test}.{js,ts,jsx,tsx}",
      ".output",
      get("ignorePrefix") && `**/${get("ignorePrefix")}*.*`
    ].concat(val).filter(Boolean)
  },
  watch: {
    $resolve: (val, get) => {
      const rootDir = get("rootDir");
      return Array.from(new Set([].concat(val, get("_nuxtConfigFiles")).filter(Boolean).map((p) => resolve(rootDir, p))));
    }
  },
  watchers: {
    rewatchOnRawEvents: void 0,
    webpack: {
      aggregateTimeout: 1e3
    },
    chokidar: {
      ignoreInitial: true
    }
  },
  editor: void 0,
  hooks: null,
  runtimeConfig: {
    $resolve: (val, get) => defu(val, {
      ...get("publicRuntimeConfig"),
      ...get("privateRuntimeConfig"),
      public: get("publicRuntimeConfig"),
      app: {
        baseURL: get("app").baseURL,
        buildAssetsDir: get("app").buildAssetsDir,
        cdnURL: get("app").cdnURL
      }
    })
  },
  privateRuntimeConfig: {},
  publicRuntimeConfig: {}
};

const _internal = {
  _majorVersion: 2,
  _legacyGenerate: false,
  _start: false,
  _build: false,
  _generate: false,
  _prepare: false,
  _cli: false,
  _requiredModules: {},
  _nuxtConfigFile: void 0,
  _nuxtConfigFiles: [],
  appDir: ""
};

const build = {
  builder: {
    $resolve: (val, get) => {
      if (typeof val === "object") {
        return val;
      }
      const map = {
        vite: "@nuxt/vite-builder",
        webpack: "@nuxt/webpack-builder"
      };
      return map[val] || (get("vite") === false ? map.webpack : map.vite);
    }
  },
  sourcemap: true,
  build: {
    quiet: Boolean(isCI || isTest),
    analyze: {
      $resolve: (val, get) => {
        if (val !== true) {
          return val ?? false;
        }
        const rootDir = get("rootDir");
        return {
          template: "treemap",
          projectRoot: rootDir,
          filename: join(rootDir, ".nuxt/stats", "{name}.html")
        };
      }
    },
    profile: process.argv.includes("--profile"),
    extractCSS: false,
    cssSourceMap: {
      $resolve: (val, get) => val ?? get("sourcemap") ?? get("dev")
    },
    ssr: void 0,
    parallel: {
      $resolve: (val, get) => get("build.extractCSS") ? false : Boolean(val)
    },
    cache: false,
    standalone: false,
    publicPath: {
      $resolve: (val, get) => val ? withTrailingSlash(normalizeURL(val)) : get("app").buildAssetsDir
    },
    serverURLPolyfill: "url",
    filenames: {
      app: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
      chunk: ({ isDev, isModern }) => isDev ? `[name]${isModern ? ".modern" : ""}.js` : `[contenthash:7]${isModern ? ".modern" : ""}.js`,
      css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
      img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
      font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
      video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
    },
    loaders: {
      $resolve: (val, get) => {
        const styleLoaders = [
          "css",
          "cssModules",
          "less",
          "sass",
          "scss",
          "stylus",
          "vueStyle"
        ];
        for (const name of styleLoaders) {
          const loader = val[name];
          if (loader && loader.sourcemap === void 0) {
            loader.sourcemap = Boolean(get("build.cssSourceMap"));
          }
        }
        return val;
      },
      file: { esModule: false },
      fontUrl: { esModule: false, limit: 1e3 },
      imgUrl: { esModule: false, limit: 1e3 },
      pugPlain: {},
      vue: {
        productionMode: { $resolve: (val, get) => val ?? !get("dev") },
        transformAssetUrls: {
          video: "src",
          source: "src",
          object: "src",
          embed: "src"
        },
        compilerOptions: { $resolve: (val, get) => val ?? get("vue.compilerOptions") }
      },
      css: {
        importLoaders: 0,
        esModule: false
      },
      cssModules: {
        importLoaders: 0,
        esModule: false,
        modules: {
          localIdentName: "[local]_[hash:base64:5]"
        }
      },
      less: {},
      sass: {
        sassOptions: {
          indentedSyntax: true
        }
      },
      scss: {},
      stylus: {},
      vueStyle: {}
    },
    styleResources: {},
    plugins: [],
    terser: {},
    hardSource: false,
    aggressiveCodeRemoval: false,
    optimizeCSS: {
      $resolve: (val, get) => val ?? (get("build.extractCSS") ? {} : false)
    },
    optimization: {
      runtimeChunk: "single",
      minimize: { $resolve: (val, get) => val ?? !get("dev") },
      minimizer: void 0,
      splitChunks: {
        chunks: "all",
        automaticNameDelimiter: "/",
        cacheGroups: {}
      }
    },
    splitChunks: {
      layouts: false,
      pages: true,
      commons: true
    },
    corejs: "auto",
    babel: {
      configFile: false,
      babelrc: false,
      plugins: [],
      presets: {},
      cacheDirectory: {
        $resolve: (val, get) => val ?? get("dev")
      }
    },
    transpile: {
      $resolve: (val) => [].concat(val).filter(Boolean)
    },
    postcss: {
      execute: void 0,
      postcssOptions: {
        $resolve: (val, get) => {
          const postcssOptions = get("postcss");
          Object.assign(postcssOptions, defu(postcssOptions, val));
          return postcssOptions;
        }
      },
      sourcemap: void 0,
      implementation: void 0,
      order: ""
    },
    html: {
      minify: {
        collapseBooleanAttributes: true,
        decodeEntities: true,
        minifyCSS: true,
        minifyJS: true,
        processConditionalComments: true,
        removeEmptyAttributes: true,
        removeRedundantAttributes: true,
        trimCustomFragments: true,
        useShortDoctype: true
      }
    },
    template: void 0,
    templates: [],
    watch: [],
    devMiddleware: {
      stats: "none"
    },
    hotMiddleware: {},
    vendor: {
      $meta: {
        deprecated: "vendor has been deprecated since nuxt 2"
      }
    },
    stats: {
      $resolve: (val, get) => val === "none" || get("build.quiet") ? false : val,
      excludeAssets: [
        /.map$/,
        /index\..+\.html$/,
        /vue-ssr-(client|modern)-manifest.json/
      ]
    },
    friendlyErrors: true,
    additionalExtensions: [],
    warningIgnoreFilters: [],
    followSymlinks: false
  }
};

const messages = {
  loading: "Loading...",
  error_404: "This page could not be found",
  server_error: "Server error",
  nuxtjs: "Nuxt",
  back_to_home: "Back to the home page",
  server_error_details: "An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.",
  client_error: "Error",
  client_error_details: "An error occurred while rendering the page. Check developer tools console for details."
};

const render = {
  bundleRenderer: {
    shouldPrefetch: () => false,
    shouldPreload: (_fileWithoutQuery, asType) => ["script", "style"].includes(asType),
    runInNewContext: { $resolve: (val, get) => val ?? get("dev") }
  },
  crossorigin: void 0,
  resourceHints: true,
  ssr: void 0,
  ssrLog: { $resolve: (val, get) => get("dev") ? Boolean(val) : false },
  http2: {
    push: false,
    shouldPush: null,
    pushAssets: null
  },
  static: {
    prefix: true
  },
  compressor: {
    threshold: 0
  },
  etag: {
    hash: false,
    weak: false
  },
  csp: {
    $resolve: (val, get) => {
      if (!val) {
        return false;
      }
      return {
        hashAlgorithm: "sha256",
        allowedSources: void 0,
        policies: void 0,
        addMeta: Boolean(get("target") === "static"),
        unsafeInlineCompatibility: false,
        reportOnly: get("debug"),
        ...val
      };
    }
  },
  dist: {
    index: false,
    maxAge: "1y"
  },
  fallback: {
    dist: {},
    static: {
      skipUnknown: true,
      handlers: {
        ".htm": false,
        ".html": false
      }
    }
  }
};

const router = {
  options: {},
  mode: "history",
  base: {
    $resolve: (val, get) => val ? withTrailingSlash(normalizeURL(val)) : get("app").baseURL
  },
  _routerBaseSpecified: {
    $resolve: (_val, get) => typeof get("router.base") === "string"
  },
  routes: [],
  routeNameSplitter: "-",
  middleware: {
    $resolve: (val) => Array.isArray(val) ? val : [val].filter(Boolean)
  },
  linkActiveClass: "nuxt-link-active",
  linkExactActiveClass: "nuxt-link-exact-active",
  linkPrefetchedClass: false,
  extendRoutes: null,
  scrollBehavior: {
    $schema: {
      deprecated: "router.scrollBehavior` property is deprecated in favor of using `~/app/router.scrollBehavior.js` file, learn more: https://nuxtjs.org/api/configuration-router#scrollbehavior"
    }
  },
  parseQuery: false,
  stringifyQuery: false,
  fallback: false,
  prefetchLinks: true,
  prefetchPayloads: true,
  trailingSlash: void 0
};

const server = {
  https: false,
  port: process.env.NUXT_PORT || process.env.PORT || process.env.npm_package_config_nuxt_port || 3e3,
  host: process.env.NUXT_HOST || process.env.HOST || process.env.npm_package_config_nuxt_host || "localhost",
  socket: process.env.UNIX_SOCKET || process.env.npm_package_config_unix_socket,
  timing: (val) => val ? { total: true, ...val } : false
};

const cli = {
  badgeMessages: [],
  bannerColor: "green"
};

const generate = {
  dir: {
    $resolve: (val = "dist", get) => resolve(get("rootDir"), val)
  },
  routes: [],
  exclude: [],
  concurrency: 500,
  interval: 0,
  subFolders: true,
  fallback: { $resolve: (val) => val === true ? "400.html" : val || "200.html" },
  crawler: true,
  manifest: true,
  nojekyll: true,
  cache: {
    ignore: [],
    globbyOptions: {
      gitignore: true
    }
  },
  staticAssets: {
    dir: "static",
    base: { $resolve: (val, get) => val || joinURL(get("app").buildAssetsDir, get("generate.dir")) },
    versionBase: { $resolve: (val, get) => val || joinURL(get("generate.base"), get("generate.version")) },
    version: { $resolve: (val) => val || String(Math.round(Date.now() / 1e3)) }
  }
};

const postcss = {
  postcss: {
    config: false,
    plugins: {
      "postcss-import": {
        $resolve: (val, get) => val !== false ? defu(val || {}, {
          resolve: createResolver({
            alias: { ...get("alias") },
            modules: [
              get("srcDir"),
              get("rootDir"),
              ...get("modulesDir")
            ]
          })
        }) : val
      },
      "postcss-url": {},
      autoprefixer: {},
      cssnano: {
        $resolve: (val, get) => val ?? (get("dev") && {
          preset: ["default", {
            minifyFontValues: { removeQuotes: false }
          }]
        })
      }
    }
  }
};

const typescript = {
  typescript: {
    strict: false,
    typeCheck: false,
    tsConfig: {},
    shim: true
  }
};

const vite = {
  vite: {
    root: {
      $resolve: (val, get) => val ?? get("srcDir")
    },
    mode: {
      $resolve: (val, get) => val ?? get("dev") ? "development" : "production"
    },
    logLevel: "warn",
    define: {
      $resolve: (val, get) => ({
        "process.dev": get("dev"),
        ...val || {}
      })
    },
    resolve: {
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
    },
    base: {
      $resolve: (val, get) => val ?? get("dev") ? joinURL(get("app").baseURL, get("app").buildAssetsDir) : "/__NUXT_BASE__/"
    },
    publicDir: {
      $resolve: (val, get) => val ?? resolve(get("srcDir"), get("dir").public)
    },
    vue: {
      isProduction: {
        $resolve: (val, get) => val ?? !get("dev")
      },
      template: {
        compilerOptions: {
          $resolve: (val, get) => val ?? get("vue").compilerOptions
        }
      }
    },
    optimizeDeps: {
      exclude: {
        $resolve: (val, get) => [
          ...val || [],
          ...get("build.transpile").filter((i) => typeof i === "string"),
          "vue-demi"
        ]
      }
    },
    esbuild: {
      jsxFactory: "h",
      jsxFragment: "Fragment",
      tsconfigRaw: "{}"
    },
    clearScreen: false,
    build: {
      assetsDir: {
        $resolve: (val, get) => val ?? get("dev") ? withoutLeadingSlash(get("app").buildAssetsDir) : "."
      },
      emptyOutDir: false
    },
    server: {
      fs: {
        strict: false,
        allow: {
          $resolve: (val, get) => [
            get("buildDir"),
            get("srcDir"),
            get("rootDir"),
            ...get("modulesDir"),
            ...val ?? []
          ]
        }
      }
    }
  }
};

const webpack = {
  webpack: {
    analyze: {
      $resolve: (val, get) => {
        if (val !== true) {
          return val ?? false;
        }
        const rootDir = get("rootDir");
        return {
          template: "treemap",
          projectRoot: rootDir,
          filename: join(rootDir, ".nuxt/stats", "{name}.html")
        };
      }
    },
    profile: process.argv.includes("--profile"),
    extractCSS: false,
    cssSourceMap: {
      $resolve: (val, get) => val ?? get("dev")
    },
    serverURLPolyfill: "url",
    filenames: {
      app: ({ isDev }) => isDev ? `[name].js` : `[contenthash:7].js`,
      chunk: ({ isDev }) => isDev ? `[name].js` : `[contenthash:7].js`,
      css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
      img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
      font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
      video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
    },
    loaders: {
      $resolve: (val, get) => {
        const styleLoaders = [
          "css",
          "cssModules",
          "less",
          "sass",
          "scss",
          "stylus",
          "vueStyle"
        ];
        for (const name of styleLoaders) {
          const loader = val[name];
          if (loader && loader.sourceMap === void 0) {
            loader.sourceMap = Boolean(get("build.cssSourceMap"));
          }
        }
        return val;
      },
      file: { esModule: false },
      fontUrl: { esModule: false, limit: 1e3 },
      imgUrl: { esModule: false, limit: 1e3 },
      pugPlain: {},
      vue: {
        productionMode: { $resolve: (val, get) => val ?? !get("dev") },
        transformAssetUrls: {
          video: "src",
          source: "src",
          object: "src",
          embed: "src"
        },
        compilerOptions: { $resolve: (val, get) => val ?? get("vue.compilerOptions") }
      },
      css: {
        importLoaders: 0,
        url: {
          filter: (url, resourcePath) => !url.startsWith("/")
        },
        esModule: false
      },
      cssModules: {
        importLoaders: 0,
        url: {
          filter: (url, resourcePath) => !url.startsWith("/")
        },
        esModule: false,
        modules: {
          localIdentName: "[local]_[hash:base64:5]"
        }
      },
      less: {},
      sass: {
        sassOptions: {
          indentedSyntax: true
        }
      },
      scss: {},
      stylus: {},
      vueStyle: {}
    },
    plugins: [],
    terser: {},
    aggressiveCodeRemoval: false,
    optimizeCSS: {
      $resolve: (val, get) => val ?? (get("build.extractCSS") ? {} : false)
    },
    optimization: {
      runtimeChunk: "single",
      minimize: { $resolve: (val, get) => val ?? !get("dev") },
      minimizer: void 0,
      splitChunks: {
        chunks: "all",
        automaticNameDelimiter: "/",
        cacheGroups: {}
      }
    },
    postcss: {
      execute: void 0,
      postcssOptions: {
        config: {
          $resolve: (val, get) => val ?? get("postcss.config")
        },
        plugins: {
          $resolve: (val, get) => val ?? get("postcss.plugins")
        }
      },
      sourceMap: void 0,
      implementation: void 0,
      order: ""
    },
    devMiddleware: {
      stats: "none"
    },
    hotMiddleware: {},
    friendlyErrors: true,
    warningIgnoreFilters: []
  }
};

const nitro = {
  nitro: {},
  serverHandlers: [],
  devServerHandlers: []
};

const experimental = {
  experimental: {
    asyncEntry: {
      $resolve: (val, get) => val ?? (get("dev") && get("experimental.viteNode")) ?? false
    },
    viteNode: process.env.EXPERIMENTAL_VITE_NODE ? true : false,
    reactivityTransform: false
  }
};

const index = {
  ..._adhoc,
  ..._app,
  ..._common,
  ..._internal,
  ...postcss,
  ...typescript,
  ...vite,
  ...webpack,
  ...nitro,
  ...experimental,
  ...build,
  messages,
  render,
  router,
  server,
  cli,
  generate
};

export { index as NuxtConfigSchema };
