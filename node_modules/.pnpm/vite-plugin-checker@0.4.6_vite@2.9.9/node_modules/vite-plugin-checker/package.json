{
  "name": "vite-plugin-checker",
  "version": "0.4.6",
  "description": "Vite plugin that runs TypeScript type checker on a separate process.",
  "main": "lib/main.js",
  "bin": {
    "vite-plugin-checker-vls": "./bin/vls"
  },
  "types": "lib/main.d.ts",
  "files": [
    "lib",
    "!lib/checkers/vueTsc/typescript-vue-tsc"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fi3ework/vite-plugin-checker.git"
  },
  "keywords": [
    "vite",
    "vite-plugin",
    "typescript"
  ],
  "author": "fi3ework <fi3ework@gmail.com>",
  "license": "MIT",
  "bugs": "https://github.com/fi3ework/vite-plugin-checker/issues",
  "homepage": "https://github.com/fi3ework/vite-plugin-checker",
  "dependencies": {
    "@babel/code-frame": "^7.12.13",
    "ansi-escapes": "^4.3.0",
    "chalk": "^4.1.1",
    "chokidar": "^3.5.1",
    "commander": "^8.0.0",
    "fast-glob": "^3.2.7",
    "lodash.debounce": "^4.0.8",
    "lodash.pick": "^4.4.0",
    "npm-run-path": "^4.0.1",
    "strip-ansi": "^6.0.0",
    "tiny-invariant": "^1.1.0",
    "vscode-languageclient": "^7.0.0",
    "vscode-languageserver": "^7.0.0",
    "vscode-languageserver-textdocument": "^1.0.1",
    "vscode-uri": "^3.0.2"
  },
  "peerDependencies": {
    "vite": "^2.0.0"
  },
  "devDependencies": {
    "@types/eslint": "^7.2.14",
    "@types/lodash.debounce": "^4.0.6",
    "@types/lodash.pick": "^4.4.6",
    "@volar/vue-typescript": "^0.33.0",
    "esbuild": "^0.14.27",
    "npm-run-all": "^4.1.5",
    "optionator": "^0.9.1",
    "tsup": "^5.12.3",
    "typescript": "~4.5.5",
    "vls": "^0.7.6",
    "vue-tsc": "0.33.5"
  },
  "scripts": {
    "dev": "tsup --watch",
    "clean": "rimraf lib",
    "build": "tsup",
    "build:test": "tsup --sourcemap inline",
    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s --commit-path . --lerna-package vite-plugin-checker",
    "release": "zx ../../scripts/release.mjs"
  },
  "readme": "# vite-plugin-checker\n\nA Vite plugin that can run TypeScript, VLS, vue-tsc, ESLint in worker thread.\n\n[![npm version](https://img.shields.io/npm/v/vite-plugin-checker)](https://www.npmjs.com/package/vite-plugin-checker) [![downloads/month](https://img.shields.io/npm/dm/vite-plugin-checker)](https://www.npmtrends.com/vite-plugin-checker) [![Unit Test](https://github.com/fi3ework/vite-plugin-checker/actions/workflows/ci.yml/badge.svg)](https://github.com/fi3ework/vite-plugin-checker/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/fi3ework/vite-plugin-checker/branch/main/graph/badge.svg?token=YCU4HJ66RA)](https://codecov.io/gh/fi3ework/vite-plugin-checker)\n\n## Features\n\n- ‚ö°Ô∏è Speeds up TypeScript, vue-tsc, ESLint, etc. checks by running in a worker thread in serve mode\n- üçÄ Works good with vanilla JS / TS, React, Vue2, Vue3\n- üí¨ Prompt errors in an overlay UI and terminal\n- üåó Works both in Vite serve and build mode\n\n<p align=\"center\">\n  <img alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/12322740/152739742-7444ee62-9ca7-4379-8f02-495c612ecc5c.png\">\n</p>\n\n> History version documentations [0.1](https://github.com/fi3ework/vite-plugin-checker/tree/v0.1.x), [0.2](https://github.com/fi3ework/vite-plugin-checker/tree/v0.2), [0.3](https://github.com/fi3ework/vite-plugin-checker/tree/v0.3.x). It's highly recommended to use latest version before 1.0.0, although there's some breaking changes, the plugin configuration is quite simple.\n\n## Online playground\n\n| Examples           | StackBlitz                                                       |\n| ------------------ | ---------------------------------------------------------------- |\n| Vue3 + vue-tsc     | [‚ö°Ô∏è StackBlitz](https://stackblitz.com/edit/vitejs-vite-p4qsv6) |\n| React + TypeScript | [‚ö°Ô∏è StackBlitz](https://stackblitz.com/edit/vitejs-vite-bsdp5b) |\n| ESLint             | [‚ö°Ô∏è StackBlitz](https://stackblitz.com/edit/vitejs-vite-xkwqvz) |\n| Vue2 + VLS         | [‚ö°Ô∏è StackBlitz](https://stackblitz.com/edit/vitejs-vite-bqtcau) |\n| Multiple           | [‚ö°Ô∏è StackBlitz](https://stackblitz.com/edit/vitejs-vite-uetqdg) |\n\n## Getting Started\n\n1. Install plugin.\n\n   ```bash\n   pnpm add vite-plugin-checker -D\n   ```\n\n2. Add plugin to Vite config file. Add the checker you need. We add TypeScript below as an example. See all available checkers [here](#Checker-configurations).\n\n   ```ts\n   // vite.config.js\n   import checker from 'vite-plugin-checker'\n\n   export default {\n     plugins: [checker({ typescript: true })], // e.g. use TypeScript check\n   }\n   ```\n\n3. Open localhost page and start development üöÄ.\n\nüí° **Caveats**:\n\n1. It's recommended to open a browser for a better terminal flush, see [#27](https://github.com/fi3ework/vite-plugin-checker/pull/27).\n2. `server.ws.on` is introduced to Vite in [2.6.8](https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#268-2021-10-18). vite-plugin-checker relies on `server.ws.on` to bring diagnostics back after a full reload and it' not available for older version of Vite.\n\n## Checker configurations\n\nFor each checker config field below:\n\n- Set to `true` to use a checker with its default value (except ESLint).\n- Make sure to install the peer dependencies indicated of each checker.\n- Leave the field blank or `false` to disable the checker.\n- Checker can be enabled with an advanced object config.\n\n### TypeScript\n\n1. Make sure [typescript](https://www.npmjs.com/package/typescript) is installed as a peer dependency.\n\n2. Add `typescript` field to plugin config.\n\n   ```js\n   export default {\n     plugins: [checker({ typescript: true /** or an object config */ })],\n   }\n   ```\n\n   Advanced object configuration table of `options.typescript`\n\n   | field        | Type      | Default value                                         | Description                                                                                                                                                                                                                     |\n   | :----------- | --------- | ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n   | root         | `string`  | [Vite config](https://vitejs.dev/config/#root) `root` | Root path to find tsconfig file                                                                                                                                                                                                 |\n   | tsconfigPath | `string`  | `\"tsconfig.json\"`                                     | Relative tsconfig path to `root`                                                                                                                                                                                                |\n   | buildMode    | `boolean` | `false`                                               | Add [`--build`](https://www.typescriptlang.org/docs/handbook/project-references.html) to `tsc` flag, note that `noEmit` does NOT work if `buildMode` is `true` ([#36917](https://github.com/microsoft/TypeScript/issues/36917)) |\n\n### vue-tsc (Volar)\n\n1. Make sure [vue-tsc](https://www.npmjs.com/package/vue-tsc) & [typescript](https://www.npmjs.com/package/typescript) are installed as a peer dependency of your Vite project.\n\n   ‚ö†Ô∏è The `vue-tsc` version must >= `0.33.9`.\n\n   ```bash\n   pnpm add vue-tsc@latest typescript -D\n   ```\n\n2. Add `vueTsc` field to plugin config.\n\n   ```js\n   export default {\n     plugins: [checker({ vueTsc: true /** or an object config */ })],\n   }\n   ```\n\n   Advanced object configuration table of `options.vueTsc`\n\n   | field        | Type     | Default value                                         | Description                      |\n   | :----------- | -------- | ----------------------------------------------------- | -------------------------------- |\n   | root         | `string` | [Vite config](https://vitejs.dev/config/#root) `root` | Root path to find tsconfig file  |\n   | tsconfigPath | `string` | `\"tsconfig.json\"`                                     | Relative tsconfig path to `root` |\n\n3. (Optional for Vue2 user) The type check is powered by `vue-tsc` so it supports Vue2 according to the [documentation](https://github.com/johnsoncodehk/volar#using), you need to install `@vue/runtime-dom` by yourself.\n\n### ESLint\n\n1. Make sure [eslint](https://www.npmjs.com/package/eslint) and related plugins for your `eslintrc` are installed as peer dependencies.\n\n2. **(Optional but highly recommended)** Install `optionator@^0.9.1` with your package manager. It's needed because of ESLint dependents on it. It's probably working fine even it's not installed as it's accessed as a phantom dependency. But when you set `hoist=false` of pnpm. It won't be accessible anymore without explicit installation.\n\n3. Add `eslint` field to plugin config and `options.eslint.lintCommand` is required. The `lintCommand` is the same as the lint command of your project. The default root of the command uses Vite's [root](https://vitejs.dev/config/#root).\n\n   ```js\n   // e.g.\n   export default {\n     plugins: [\n       checker({\n         eslint: {\n           lintCommand: 'eslint \"./src/**/*.{ts,tsx}\"', // for example, lint .ts & .tsx\n         },\n       }),\n     ],\n   }\n   ```\n\n   Advanced object configuration table of `options.eslint`\n\n   | field              | Type                                                                                                       | Default value          | Description                                                                                                                                                                                                              |\n   | :----------------- | ---------------------------------------------------------------------------------------------------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n   | lintCommand        | `string`                                                                                                   | This value is required | `lintCommand` will be executed at build mode, and will also be used as default config for dev mode when `eslint.dev.eslint` is nullable.                                                                                 |\n   | dev.overrideConfig | [`ESLint.Options`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/eslint/index.d.ts) | `undefined`            | **(Only in dev mode)** You can override the options of the translated from `lintCommand`. Config priority: `const eslint = new ESLint({cwd: root, ...translatedOptions, ...pluginConfig.eslint.dev?.overrideConfig, })`. |\n   | dev.logLevel       | `('error' \\| 'warning')[]`                                                                                 | `['error', 'warning']` | **(Only in dev mode)** Which level of ESLint should be emitted to terminal and overlay in dev mode                                                                                                                       |\n\n### vls (Vetur)\n\n1. Make sure [vls](https://www.npmjs.com/package/vls) is installed as a peer dependency, plugin will use vls as the check server.\n\n   ```bash\n   pnpm add vls -D\n   ```\n\n2. Add `vls` field to plugin config.\n\n   ```js\n   module.exports = {\n     plugins: [checker({ vls: true })],\n   }\n   ```\n\n   Advanced object configuration of `options.vls`\n\n   VLS configuration accepts the same values that can be configured in VS code with keys that start with `vetur`.\n   These are configured with nested objects rather than dotted string notation. TypeScript intellisense is available.\n\n   See [`initParams.ts`](https://github.com/fi3ework/vite-plugin-checker/blob/8fc5d7f4a908a4c80d1cb978e0acf1d4e5700e6a/packages/vite-plugin-checker/src/checkers/vls/initParams.ts#L33) for a comprehensive list of the defaults that can be overridden. Unfortunately, Vetur does not provide a single comprehensive document of all its options.\n\n   For example, to performing checking only the `<script>` block:\n\n   ```ts\n   checker({\n     vls: {\n       vetur: {\n         validation: {\n           template: false,\n           templateProps: false,\n           interpolation: false,\n           style: false,\n         },\n       },\n     },\n   }),\n   ```\n\n## Shared configuration\n\nBelow is some common configuration to control the behaviors of the plugin.\n\n```ts\n{\n  /**\n   * Show overlay on UI view when there are errors or warnings in dev mode.\n   * - Set `true` to show overlay\n   * - Set `false` to disable overlay\n   * - Set with a object to customize overlay\n   *\n   * @defaultValue `true`\n   */\n  overlay:\n    | boolean\n    | {\n        /**\n         * Set this true if you want the overlay to default to being open if errors/warnings are found\n         * @defaultValue `true`\n         */\n        initialIsOpen?: boolean\n        /**\n         * The position of the vite-plugin-checker badge to open and close the diagnostics panel\n         * @default `bl`\n         */\n        position?: 'tl' | 'tr' | 'bl' | 'br'\n        /**\n         * Use this to add extra style to the badge button, see details of [Svelte style](https://svelte.dev/docs#template-syntax-element-directives-style-property)\n         * For example, if you want to hide the badge, you can pass `display: none;` to the badgeStyle property\n         */\n        badgeStyle?: string\n      }\n  /**\n   * stdout in terminal which starts the Vite server in dev mode.\n   * - Set `true` to enable\n   * - Set `false` to disable\n   *\n   * @defaultValue `true`\n   */\n  terminal: boolean\n  /**\n   * Enable checking in build mode\n   * @defaultValue `true`\n   */\n  enableBuild: boolean\n}\n```\n\n## Playground\n\nRun projects in [`playground/*`](./playground) to try it out.\n\n```bash\npnpm i\npnpm run build\ncd ./playground/<one_exapmple>    # choose one example\npnpm run dev                      # test in serve mode\npnpm run build                    # test in build mode\n```\n\n## License\n\nMIT License ¬© 2022 [fi3ework](https://github.com/fi3ework)\n\n"
}