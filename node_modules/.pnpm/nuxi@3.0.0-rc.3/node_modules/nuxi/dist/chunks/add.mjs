import { existsSync, promises } from 'node:fs';
import { r as resolve, d as dirname } from './index3.mjs';
import { c as consola } from './consola.mjs';
import { l as loadKit } from './kit.mjs';
import { u as upperFirst } from './index8.mjs';
import { d as defineNuxtCommand } from './index.mjs';
import './_commonjsHelpers.mjs';
import 'util';
import 'path';
import 'fs';
import 'os';
import 'tty';
import './cjs.mjs';
import 'node:module';
import 'node:url';

const api = ({ name }) => ({
  path: `server/api/${name}.ts`,
  contents: `
export default defineEventHandler((event) => {
  return 'Hello ${name}'
})
`
});
const plugin = ({ name }) => ({
  path: `plugins/${name}.ts`,
  contents: `
export default defineNuxtPlugin((nuxtApp) => {})
  `
});
const component = ({ name }) => ({
  path: `components/${name}.vue`,
  contents: `
<script lang="ts" setup><\/script>

<template>
  <div>
    Component: ${name}
  </div>
</template>

<style scoped></style>
`
});
const composable = ({ name }) => {
  const nameWithUsePrefix = name.startsWith("use") ? name : `use${upperFirst(name)}`;
  return {
    path: `composables/${name}.ts`,
    contents: `
export const ${nameWithUsePrefix} = () => {
  return ref()
}
  `
  };
};
const middleware = ({ name }) => ({
  path: `middleware/${name}.ts`,
  contents: `
export default defineNuxtRouteMiddleware((to, from) => {})
`
});
const layout = ({ name }) => ({
  path: `layouts/${name}.vue`,
  contents: `
<script lang="ts" setup><\/script>

<template>
  <div>
    Layout: ${name}
    <slot />
  </div>
</template>

<style scoped></style>
`
});
const page = ({ name }) => ({
  path: `pages/${name}.vue`,
  contents: `
<script lang="ts" setup><\/script>

<template>
  <div>
    Page: foo
  </div>
</template>

<style scoped></style>
`
});
const templates = {
  api,
  plugin,
  component,
  composable,
  middleware,
  layout,
  page
};

const add = defineNuxtCommand({
  meta: {
    name: "add",
    usage: `npx nuxi add [--cwd] [--force] ${Object.keys(templates).join("|")} <name>`,
    description: "Create a new template file."
  },
  async invoke(args) {
    const cwd = resolve(args.cwd || ".");
    const template = args._[0];
    const name = args._[1];
    if (!templates[template]) {
      consola.error(`Template ${template} is not supported. Possible values: ${Object.keys(templates).join(", ")}`);
      process.exit(1);
    }
    if (!name) {
      consola.error("name argument is missing!");
      process.exit(1);
    }
    const kit = await loadKit(cwd);
    const config = await kit.loadNuxtConfig({ cwd });
    const res = templates[template]({ name });
    const path = resolve(config.srcDir, res.path);
    if (!args.force && existsSync(path)) {
      consola.error(`File exists: ${path} . Use --force to override or use a different name.`);
      process.exit(1);
    }
    const parentDir = dirname(path);
    if (!existsSync(parentDir)) {
      consola.info("Creating directory", parentDir);
      if (template === "page") {
        consola.info("This enables vue-router functionality!");
      }
      await promises.mkdir(parentDir, { recursive: true });
    }
    await promises.writeFile(path, res.contents.trim() + "\n");
    consola.info(`\u{1FA84} Generated a new ${template} in ${path}`);
  }
});

export { add as default };
