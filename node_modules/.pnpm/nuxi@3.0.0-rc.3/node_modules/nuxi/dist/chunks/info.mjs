import os from 'node:os';
import { existsSync, readFileSync } from 'node:fs';
import { createRequire } from 'node:module';
import { r as resolve } from './index3.mjs';
import { j as jiti } from './index6.mjs';
import { s as splitByCase } from './index8.mjs';
import clipboardy from './browser.mjs';
import { g as getPackageManager, a as getPackageManagerVersion } from './packageManagers.mjs';
import { f as findup } from './fs.mjs';
import { d as defineNuxtCommand } from './index.mjs';
import 'crypto';
import 'fs';
import 'module';
import 'path';
import 'util';
import 'os';
import 'vm';
import 'url';
import 'assert';
import './_commonjsHelpers.mjs';
import 'buffer';
import 'tty';
import 'v8';
import 'node:child_process';

const suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
const suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
const JsonSigRx = /^["{[]|^-?[0-9][0-9.]{0,14}$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor") {
    return;
  }
  return value;
}
function destr(val) {
  if (typeof val !== "string") {
    return val;
  }
  const _lval = val.toLowerCase();
  if (_lval === "true") {
    return true;
  }
  if (_lval === "false") {
    return false;
  }
  if (_lval === "null") {
    return null;
  }
  if (_lval === "nan") {
    return NaN;
  }
  if (_lval === "infinity") {
    return Infinity;
  }
  if (_lval === "undefined") {
    return void 0;
  }
  if (!JsonSigRx.test(val)) {
    return val;
  }
  try {
    if (suspectProtoRx.test(val) || suspectConstructorRx.test(val)) {
      return JSON.parse(val, jsonParseTransform);
    }
    return JSON.parse(val);
  } catch (_e) {
    return val;
  }
}

const info = defineNuxtCommand({
  meta: {
    name: "info",
    usage: "npx nuxi info [rootDir]",
    description: "Get information about nuxt project"
  },
  async invoke(args) {
    const rootDir = resolve(args._[0] || ".");
    const nuxtConfig = getNuxtConfig(rootDir);
    const { dependencies = {}, devDependencies = {} } = findPackage(rootDir);
    const getDepVersion = (name) => getPkg(name, rootDir)?.version || dependencies[name] || devDependencies[name];
    const listModules = (arr = []) => arr.map(normalizeConfigModule).filter(Boolean).map((name) => {
      const npmName = name.split("/").splice(0, 2).join("/");
      const v = getDepVersion(npmName);
      return "`" + (v ? `${name}@${v}` : name) + "`";
    }).join(", ");
    const nuxtVersion = getDepVersion("nuxt") || getDepVersion("nuxt-edge") || getDepVersion("nuxt3") || "0.0.0";
    const isNuxt3 = nuxtVersion.startsWith("3");
    const builder = isNuxt3 ? nuxtConfig.builder || (nuxtConfig.vite !== false ? "vite" : "webpack") : nuxtConfig.bridge?.vite ? "vite" : nuxtConfig.buildModules?.includes("nuxt-vite") ? "vite" : "webpack";
    let packageManager = getPackageManager(rootDir);
    if (packageManager) {
      packageManager += "@" + getPackageManagerVersion(packageManager);
    } else {
      packageManager = "unknown";
    }
    const infoObj = {
      OperatingSystem: os.type(),
      NodeVersion: process.version,
      NuxtVersion: nuxtVersion,
      PackageManager: packageManager,
      Builder: builder,
      UserConfig: Object.keys(nuxtConfig).map((key) => "`" + key + "`").join(", "),
      RuntimeModules: listModules(nuxtConfig.modules),
      BuildModules: listModules(nuxtConfig.buildModules)
    };
    console.log("RootDir:", rootDir);
    let maxLength = 0;
    const entries = Object.entries(infoObj).map(([key, val]) => {
      const label = splitByCase(key).join(" ");
      if (label.length > maxLength) {
        maxLength = label.length;
      }
      return [label, val || "-"];
    });
    let infoStr = "";
    for (const [label, value] of entries) {
      infoStr += "- " + (label + ": ").padEnd(maxLength + 2) + (value.includes("`") ? value : "`" + value + "`") + "\n";
    }
    const copied = await clipboardy.write(infoStr).then(() => true).catch(() => false);
    const splitter = "------------------------------";
    console.log(`Nuxt project info: ${copied ? "(copied to clipboard)" : ""}

${splitter}
${infoStr}${splitter}
`);
    const isNuxt3OrBridge = infoObj.NuxtVersion.startsWith("3") || infoObj.BuildModules.includes("bridge");
    const repo = isNuxt3OrBridge ? "nuxt/framework" : "nuxt/nuxt.js";
    console.log([
      `\u{1F449} Report an issue: https://github.com/${repo}/issues/new`,
      `\u{1F449} Suggest an improvement: https://github.com/${repo}/discussions/new`,
      `\u{1F449} Read documentation: ${isNuxt3OrBridge ? "https://v3.nuxtjs.org" : "https://nuxtjs.org"}`
    ].join("\n\n") + "\n");
  }
});
function normalizeConfigModule(module, rootDir) {
  if (!module) {
    return null;
  }
  if (typeof module === "string") {
    return module.split(rootDir).pop().split("node_modules").pop().replace(/^\//, "");
  }
  if (typeof module === "function") {
    return `${module.name}()`;
  }
  if (Array.isArray(module)) {
    return normalizeConfigModule(module[0], rootDir);
  }
}
function getNuxtConfig(rootDir) {
  try {
    return jiti(rootDir, { interopDefault: true })("./nuxt.config");
  } catch (err) {
    return {};
  }
}
function getPkg(name, rootDir) {
  let pkgPath = resolve(rootDir, "node_modules", name, "package.json");
  const _require = createRequire(rootDir);
  try {
    pkgPath = _require.resolve(name + "/package.json");
  } catch (_err) {
  }
  return readJSONSync(pkgPath);
}
function findPackage(rootDir) {
  return findup(rootDir, (dir) => {
    const p = resolve(dir, "package.json");
    if (existsSync(p)) {
      return readJSONSync(p);
    }
  }) || {};
}
function readJSONSync(filePath) {
  try {
    return destr(readFileSync(filePath, "utf-8"));
  } catch (err) {
    return null;
  }
}

export { info as default };
