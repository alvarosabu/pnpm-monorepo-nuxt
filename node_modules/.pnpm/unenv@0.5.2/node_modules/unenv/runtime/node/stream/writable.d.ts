/// <reference types="node" />
import { EventEmitter } from 'events';
import type * as stream from 'stream';
import type { BufferEncoding, Callback } from '../../_internal/types';
export declare class Writable extends EventEmitter implements stream.Writable {
    readonly writable: boolean;
    writableEnded: boolean;
    writableFinished: boolean;
    readonly writableHighWaterMark: number;
    readonly writableLength: number;
    readonly writableObjectMode: boolean;
    readonly writableCorked: number;
    destroyed: boolean;
    _data: unknown;
    _encoding: BufferEncoding;
    constructor(_opts?: stream.WritableOptions);
    pipe<T>(_destenition: T, _options?: {
        end?: boolean;
    }): T;
    _write(chunk: any, encoding: BufferEncoding, callback?: Callback): void;
    _writev?(_chunks: Array<{
        chunk: any;
        encoding: BufferEncoding;
    }>, _callback: (error?: Error | null) => void): void;
    _destroy(_error: any, _callback: Callback<any>): void;
    _final(_callback: Callback): void;
    write(chunk: any, arg2?: BufferEncoding | Callback, arg3?: Callback): boolean;
    setDefaultEncoding(_encoding: BufferEncoding): this;
    end(arg1: Callback | any, arg2?: Callback | BufferEncoding, arg3?: Callback): this;
    cork(): void;
    uncork(): void;
    destroy(_error?: Error): this;
}
