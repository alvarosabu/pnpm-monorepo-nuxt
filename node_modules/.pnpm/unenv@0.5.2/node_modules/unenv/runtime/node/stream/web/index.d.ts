/// <reference types="node" />
import type * as stramWeb from 'stream/web';
export declare const ReadableStream: (() => any) | {
    new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;
    prototype: ReadableStream<any>;
};
export declare const ReadableStreamDefaultReader: (() => any) | {
    new <R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;
    prototype: ReadableStreamDefaultReader<any>;
};
export declare const ReadableStreamBYOBReader: any;
export declare const ReadableStreamBYOBRequest: any;
export declare const ReadableByteStreamController: any;
export declare const ReadableStreamDefaultController: (() => any) | {
    new (): ReadableStreamDefaultController<any>;
    prototype: ReadableStreamDefaultController<any>;
};
export declare const TransformStream: (() => any) | {
    new <I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;
    prototype: TransformStream<any, any>;
};
export declare const TransformStreamDefaultController: (() => any) | {
    new (): TransformStreamDefaultController<any>;
    prototype: TransformStreamDefaultController<any>;
};
export declare const WritableStream: (() => any) | {
    new <W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;
    prototype: WritableStream<any>;
};
export declare const WritableStreamDefaultWriter: (() => any) | {
    new <W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;
    prototype: WritableStreamDefaultWriter<any>;
};
export declare const WritableStreamDefaultController: (() => any) | {
    new (): WritableStreamDefaultController;
    prototype: WritableStreamDefaultController;
};
export declare const ByteLengthQueuingStrategy: (() => any) | {
    new (init: QueuingStrategyInit): ByteLengthQueuingStrategy;
    prototype: ByteLengthQueuingStrategy;
};
export declare const CountQueuingStrategy: (() => any) | {
    new (init: QueuingStrategyInit): CountQueuingStrategy;
    prototype: CountQueuingStrategy;
};
export declare const TextEncoderStream: (() => any) | {
    new (): TextEncoderStream;
    prototype: TextEncoderStream;
};
export declare const TextDecoderStream: (() => any) | {
    new (label?: string, options?: TextDecoderOptions): TextDecoderStream;
    prototype: TextDecoderStream;
};
declare const _default: typeof stramWeb;
export default _default;
